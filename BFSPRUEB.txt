class Fila(object):
	def __init__(self):
		self.fl=[]
    def obtener(self):
        return self.fl.pop(0)
    def meter(self,e):
        self.fl.append(e)
        return len(self.fl)
    @property
    def longitud(self):
        return len(self.fl)
																												class Pila(object):
    def __init__(self):
        self.pl=[]
    def obtener(self):
        return self.pl.pop()
    def meter(self,e):
        self.pl.append(e)
        return len(self.pl)
    @property
    def longitud(self):
        return len(self.pl)
																												class Grafo:
 
    def __init__(self):
        self.CTO = set() # un conjunto
        self.MARI = dict() # un mapeo de pesos de aristas
        self.vec = dict() # un mapeo
 
    def agrega(self, v):
        self.CTO.add(v)
        if not v in self.vecinos: # vecindad de v
            self.vecinos[v] = set() # inicialmente no tiene nada
 
    def conecta(self, v, u, peso=1):
        self.agrega(v)
        self.agrega(u)
        self.MARI[(v, u)] = self.MARI[(u, v)] = peso # en ambos sentidos
        self.vecinos[v].add(u)
        self.vecinos[u].add(v)
 
	def complemento(self):
        comp= Grafo()
        for v in self.CTO:
            for w in self.CTO:
                if v != w and (v, w) not in self.MARI:
                    comp.conecta(v, w, 1)
        return comp
																		def BFS(graph,ini):
    vis=[ini]
    bsq=Cola()
    bsq.meter(ini)
    while bsq.longitud>0:
        act=bsq.obtener()
        vec=graph.vec[act]
        for w in vec:
            if w not in vis:
                vis.append(w)
                bsq.meter(w)
    return vis
